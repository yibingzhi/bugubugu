/*! UndrawUi v1.2.6 */
const c = (n, r = 200, t = !1) => {
  let e = !1, l = null;
  const x = (...a) => new Promise((o, s) => {
    if (l && clearTimeout(l), t && !e) {
      const i = n.apply(void 0, a);
      o(i), e = !0;
    } else
      l = setTimeout(() => {
        const i = n.apply(void 0, a);
        o(i), e = !1, l = null;
      }, r);
  });
  return x.cancel = () => {
    l && clearTimeout(l), e = !1;
  }, x;
}, u = (n, r = 500) => {
  let t = 0;
  const e = (...l) => new Promise((x, a) => {
    const o = (/* @__PURE__ */ new Date()).getTime();
    if (o - t >= r) {
      const s = n.apply(void 0, l);
      x(s), t = o;
    }
  });
  return e.cancel = () => {
    t = (/* @__PURE__ */ new Date()).getTime();
  }, e;
}, f = (n, r = 1e3) => {
  let t = null;
  const e = (...l) => {
    t ? e.close() : t = setInterval(() => {
      n.apply(void 0, l);
    }, r);
  };
  return e.close = () => {
    t && (clearInterval(t), t = null);
  }, e;
};
function m() {
  let n = (/* @__PURE__ */ new Date()).getTime(), r = performance && performance.now && performance.now() * 1e3 || 0;
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(t) {
    let e = Math.random() * 16;
    return n > 0 ? (e = (n + e) % 16 | 0, n = Math.floor(n / 16)) : (e = (r + e) % 16 | 0, r = Math.floor(r / 16)), (t === "x" ? e : e & 3 | 8).toString(16);
  });
}
export {
  m as U,
  c as d,
  f as i,
  u as t
};
