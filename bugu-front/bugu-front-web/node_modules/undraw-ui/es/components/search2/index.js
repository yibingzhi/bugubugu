import { defineComponent as i, ref as c, computed as h, watch as V, openBlock as S, createBlock as k, unref as U } from "vue";
import { ElAutocomplete as _ } from "element-plus";
import { isEmpty as m } from "undraw-ui";
/*! UndrawUi v1.2.6 */
const g = /* @__PURE__ */ i({
  name: "USearch2",
  __name: "search2",
  props: {
    modelValue: {},
    placeholder: { default: "请输入关键词" }
  },
  emits: ["remoteSearch", "update:modelValue"],
  setup(s, { emit: n }) {
    const d = s, o = c(!0), p = c(), r = h({
      get() {
        return d.modelValue;
      },
      set(e) {
        n("update:modelValue", e);
      }
    });
    V(
      () => r.value,
      (e, l) => {
        m(e) && !m(l) && (a.value = [], o.value = !0), p.value.activated && (o.value = !0);
      }
    );
    let a = c([]);
    const f = (e, l) => {
      o.value || m(a.value) ? n("remoteSearch", e, (t) => {
        t && (a.value = t.map((u) => ({ label: u.label || u, value: u.value || u }))), l(a.value), o.value = !1;
      }) : l(a.value);
    };
    function v(e) {
      a.value = [e];
    }
    return (e, l) => (S(), k(U(_), {
      modelValue: r.value,
      "onUpdate:modelValue": l[0] || (l[0] = (t) => r.value = t),
      ref_key: "autocompleteRef",
      ref: p,
      clearable: "",
      "fetch-suggestions": f,
      placeholder: e.placeholder,
      onSelect: v
    }, null, 8, ["modelValue", "placeholder"]));
  }
}), B = g;
export {
  B as U
};
