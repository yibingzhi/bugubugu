import editorVue from './editor.vue';
export type * from './mention.vue';
export type EditorInstance = InstanceType<typeof editorVue>;
export declare const UEditor: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: {
            minHeight?: number | undefined;
            style?: unknown;
            key?: string | number | symbol | undefined;
            ref?: import("vue").VNodeRef | undefined;
            ref_for?: boolean | undefined;
            ref_key?: string | undefined;
            onVnodeBeforeMount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeMounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUpdate?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUpdated?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>, oldVNode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeBeforeUnmount?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            onVnodeUnmounted?: ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void) | ((vnode: import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
                [key: string]: any;
            }>) => void)[] | undefined;
            class?: unknown;
            onPaste?: ((event: Event, file: File) => any) | undefined;
            onFocus?: ((event: Event) => any) | undefined;
            onBlur?: ((event: Event) => any) | undefined;
            onInput?: ((event: Event) => any) | undefined;
            onSubmit?: (() => any) | undefined;
            readonly placeholder?: string | undefined;
            readonly mention?: import("./mention.vue").MentionApi | undefined;
            readonly modelValue: string;
            readonly imgList?: string[] | undefined;
            "onUpdate:modelValue"?: ((val: string) => any) | undefined;
            "onMention-search"?: ((val: string) => any) | undefined;
            "onChange-img-list"?: ((val: any[]) => any) | undefined;
        };
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null;
        $emit: ((event: "blur", event: Event) => void) & ((event: "focus", event: Event) => void) & ((event: "input", event: Event) => void) & ((event: "submit") => void) & ((event: "paste", event: Event, file: File) => void) & ((event: "update:modelValue", val: string) => void) & ((event: "mention-search", val: string) => void) & ((event: "change-img-list", val: any[]) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            minHeight: {
                type: import("vue").PropType<number>;
                default: number;
            };
            placeholder: {
                type: import("vue").PropType<string>;
            };
            mention: {
                type: import("vue").PropType<import("./mention.vue").MentionApi>;
            };
            modelValue: {
                type: import("vue").PropType<string>;
                required: true;
            };
            imgList: {
                type: import("vue").PropType<string[]>;
            };
        }>> & {
            onPaste?: ((event: Event, file: File) => any) | undefined;
            onFocus?: ((event: Event) => any) | undefined;
            onBlur?: ((event: Event) => any) | undefined;
            onInput?: ((event: Event) => any) | undefined;
            onSubmit?: (() => any) | undefined;
            "onUpdate:modelValue"?: ((val: string) => any) | undefined;
            "onMention-search"?: ((val: string) => any) | undefined;
            "onChange-img-list"?: ((val: any[]) => any) | undefined;
        }, {
            addText: (val: string) => void;
            clear: () => void;
            focus: () => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            "update:modelValue": (val: string) => void;
            input: (event: Event) => void;
            focus: (event: Event) => void;
            blur: (event: Event) => void;
            submit: () => void;
            "mention-search": (val: string) => void;
            paste: (event: Event, file: File) => void;
            "change-img-list": (val: any[]) => void;
        }, string, {
            minHeight: number;
        }, {}, string, {}> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}>, {}, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        minHeight: {
            type: import("vue").PropType<number>;
            default: number;
        };
        placeholder: {
            type: import("vue").PropType<string>;
        };
        mention: {
            type: import("vue").PropType<import("./mention.vue").MentionApi>;
        };
        modelValue: {
            type: import("vue").PropType<string>;
            required: true;
        };
        imgList: {
            type: import("vue").PropType<string[]>;
        };
    }>> & {
        onPaste?: ((event: Event, file: File) => any) | undefined;
        onFocus?: ((event: Event) => any) | undefined;
        onBlur?: ((event: Event) => any) | undefined;
        onInput?: ((event: Event) => any) | undefined;
        onSubmit?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((val: string) => any) | undefined;
        "onMention-search"?: ((val: string) => any) | undefined;
        "onChange-img-list"?: ((val: any[]) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<{
        addText: (val: string) => void;
        clear: () => void;
        focus: () => void;
    }> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    minHeight: {
        type: import("vue").PropType<number>;
        default: number;
    };
    placeholder: {
        type: import("vue").PropType<string>;
    };
    mention: {
        type: import("vue").PropType<import("./mention.vue").MentionApi>;
    };
    modelValue: {
        type: import("vue").PropType<string>;
        required: true;
    };
    imgList: {
        type: import("vue").PropType<string[]>;
    };
}>> & {
    onPaste?: ((event: Event, file: File) => any) | undefined;
    onFocus?: ((event: Event) => any) | undefined;
    onBlur?: ((event: Event) => any) | undefined;
    onInput?: ((event: Event) => any) | undefined;
    onSubmit?: (() => any) | undefined;
    "onUpdate:modelValue"?: ((val: string) => any) | undefined;
    "onMention-search"?: ((val: string) => any) | undefined;
    "onChange-img-list"?: ((val: any[]) => any) | undefined;
}, {
    addText: (val: string) => void;
    clear: () => void;
    focus: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (val: string) => void;
    input: (event: Event) => void;
    focus: (event: Event) => void;
    blur: (event: Event) => void;
    submit: () => void;
    "mention-search": (val: string) => void;
    paste: (event: Event, file: File) => void;
    "change-img-list": (val: any[]) => void;
}, string, {
    minHeight: number;
}, {}, string, {}> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: {
        footer?(_: {}): any;
    };
});
export default UEditor;
