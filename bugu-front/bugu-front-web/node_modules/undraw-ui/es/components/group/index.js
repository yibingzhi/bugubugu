import { defineComponent as I, reactive as R, openBlock as s, createElementBlock as _, createElementVNode as f, toDisplayString as L, createVNode as S, unref as u, withCtx as a, withDirectives as B, vShow as U, normalizeClass as N, renderSlot as b, pushScopeId as P, popScopeId as D, ref as G, createBlock as y, Fragment as V, renderList as d, createSlots as h, normalizeProps as k, mergeProps as w, createCommentVNode as $ } from "vue";
import { UIcon as T, UForm as C } from "undraw-ui";
import { ElTabs as j, ElTabPane as M } from "element-plus";
import { _ as O } from "../anchor/index.js";
/*! UndrawUi v1.2.6 */
const z = (n) => (P("data-v-069708b7"), n = n(), D(), n), q = { class: "u-collapse" }, A = {
  "data-v-93814279": "",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 1024 1024",
  style: {}
}, H = /* @__PURE__ */ z(() => /* @__PURE__ */ f("path", {
  fill: "currentColor",
  d: "M831.872 340.864 512 652.672 192.128 340.864a30.592 30.592 0 0 0-42.752 0 29.12 29.12 0 0 0 0 41.6L489.664 714.24a32 32 0 0 0 44.672 0l340.288-331.712a29.12 29.12 0 0 0 0-41.728 30.592 30.592 0 0 0-42.752 0z"
}, null, -1)), J = [
  H
], K = {
  "data-v-93814279": "",
  xmlns: "http://www.w3.org/2000/svg",
  viewBox: "0 0 1024 1024",
  style: {}
}, Q = /* @__PURE__ */ z(() => /* @__PURE__ */ f("path", {
  fill: "currentColor",
  d: "m488.832 344.32-339.84 356.672a32 32 0 0 0 0 44.16l.384.384a29.44 29.44 0 0 0 42.688 0l320-335.872 319.872 335.872a29.44 29.44 0 0 0 42.688 0l.384-.384a32 32 0 0 0 0-44.16L535.168 344.32a32 32 0 0 0-46.336 0z"
}, null, -1)), W = [
  Q
], X = { class: "child" }, Y = /* @__PURE__ */ I({
  __name: "collapse",
  props: {
    label: {},
    unfold: { type: Boolean, default: !0 }
  },
  setup(n) {
    const c = n, l = R({
      visible: c.unfold
    });
    return (t, v) => (s(), _("div", q, [
      f("div", {
        class: "u-collapse__header",
        onClick: v[0] || (v[0] = () => l.visible = !l.visible)
      }, [
        f("span", null, L(c.label), 1),
        S(u(T), null, {
          default: a(() => [
            B((s(), _("svg", A, J, 512)), [
              [U, l.visible]
            ]),
            B((s(), _("svg", K, W, 512)), [
              [U, !l.visible]
            ])
          ]),
          _: 1
        })
      ]),
      f("div", {
        class: N(["u-collapse__container", { "is-fold": !l.visible }])
      }, [
        f("div", X, [
          b(t.$slots, "default", {}, void 0, !0)
        ])
      ], 2)
    ]));
  }
});
const Z = /* @__PURE__ */ O(Y, [["__scopeId", "data-v-069708b7"]]), x = /* @__PURE__ */ I({
  name: "UGroup",
  __name: "group",
  props: {
    form: {}
  },
  setup(n, { expose: c }) {
    const l = n, t = G([]);
    function v(e) {
      (t.value[0] || t.value).validate((g, o) => {
        if (o) {
          const [p] = Object.entries(o)[0];
          let r = l.form, m = r.items.find((i) => i.prop == p);
          r.group.value = m == null ? void 0 : m.group;
        }
        e(g, o);
      });
    }
    function E() {
      let e = l.form.group;
      e && !e.value && (e.value = e.labels[0]);
    }
    E();
    function F() {
      (t.value[0] || t.value).resetFields();
      let e = l.form.group;
      e && (e.value = e.labels[0]);
    }
    return c({
      validate: v,
      resetFields: F
    }), (e, g) => e.form.group && e.form.group.type == "tabs" ? (s(), y(u(j), {
      key: 0,
      class: "u-group",
      modelValue: e.form.group.value,
      "onUpdate:modelValue": g[0] || (g[0] = (o) => e.form.group.value = o)
    }, {
      default: a(() => [
        (s(!0), _(V, null, d(e.form.group.labels, (o, p) => (s(), y(u(M), {
          key: p,
          label: o,
          name: o
        }, {
          default: a(() => [
            S(u(C), {
              ref_for: !0,
              ref_key: "formRef",
              ref: t,
              form: e.form
            }, h({ _: 2 }, [
              d(e.form.items, (r, m) => ({
                name: `form-${r.prop}`,
                fn: a((i) => [
                  r.component ? $("", !0) : b(e.$slots, `form-${r.prop}`, k(w({ key: 0 }, i)))
                ])
              }))
            ]), 1032, ["form"])
          ]),
          _: 2
        }, 1032, ["label", "name"]))), 128))
      ]),
      _: 3
    }, 8, ["modelValue"])) : e.form.group && e.form.group.type == "collapse" ? (s(!0), _(V, { key: 1 }, d(e.form.group.labels, (o, p) => (s(), y(Z, {
      key: p,
      label: o
    }, {
      default: a(() => [
        S(u(C), {
          ref_for: !0,
          ref_key: "formRef",
          ref: t,
          group: o,
          form: e.form,
          style: { "margin-top": "10px" }
        }, h({ _: 2 }, [
          d(e.form.items, (r, m) => ({
            name: `form-${r.prop}`,
            fn: a((i) => [
              r.component ? $("", !0) : b(e.$slots, `form-${r.prop}`, k(w({ key: 0 }, i)))
            ])
          }))
        ]), 1032, ["group", "form"])
      ]),
      _: 2
    }, 1032, ["label"]))), 128)) : (s(), y(u(C), {
      key: 2,
      ref_key: "formRef",
      ref: t,
      form: e.form
    }, h({ _: 2 }, [
      d(e.form.items, (o, p) => ({
        name: `form-${o.prop}`,
        fn: a((r) => [
          o.component ? $("", !0) : b(e.$slots, `form-${o.prop}`, k(w({ key: 0 }, r)))
        ])
      }))
    ]), 1032, ["form"]));
  }
});
const te = x;
export {
  te as U
};
