import { FormApi, TableApi } from 'undraw-ui';
export interface CrudApi {
    beforeSave?: () => void;
    beforeUpdate?: () => void;
    save?: (val: any, done: () => void) => void;
    update?: (val: any, done: () => void) => void;
    remove?: (val: any[], done: () => void) => void;
}
interface Props {
    table: TableApi;
    crud: CrudApi;
    form?: FormApi;
    maxHeight?: number | string;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    crud: () => {};
}>, {
    refresh: {
        (...args: any): Promise<unknown>;
        cancel(): void;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    inputBlur: (val: any) => void;
    sortChange: (val: any[]) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {
    crud: () => {};
}>>> & {
    onInputBlur?: ((val: any) => any) | undefined;
    onSortChange?: ((val: any[]) => any) | undefined;
}, {
    crud: CrudApi;
}, {}>, Partial<Record<`table-${string}`, (_: any) => any>> & Partial<Record<`form-${string}`, (_: {
    item: import("undraw-ui").FormItemApi;
    data: any;
}) => any>> & {
    query?(_: {}): any;
    tool?(_: {}): any;
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
