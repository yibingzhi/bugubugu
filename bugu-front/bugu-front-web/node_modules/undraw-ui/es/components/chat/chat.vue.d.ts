export interface ChatApi {
    id: string | number;
    content: string;
    uid: string | number;
    user: {
        username: string;
        avatar: string;
    };
    createTime: string;
    float?: 'left' | 'right';
}
export interface ChatConfigApi {
    user: {
        id: string | number;
        username: string;
        avatar: string;
    };
    data: ChatApi[];
    emoji: any;
}
interface Props {
    config: ChatConfigApi;
}
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {}>, {}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "load-more": (finish: (val: any[]) => void) => void;
    submit: (val: any, finish: Function) => void;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<Props>, {}>>> & {
    onSubmit?: ((val: any, finish: Function) => any) | undefined;
    "onLoad-more"?: ((finish: (val: any[]) => void) => any) | undefined;
}, {}, {}>, {
    header?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};
type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
