import { FormItemRule } from 'element-plus';
import { Arrayable } from 'element-plus/es/utils/typescript';
interface ComponentApi {
    name: 'el-input' | 'el-select' | 'el-date' | 'u-search2' | string;
    width?: number;
    options?: any[] | {
        label: string;
        value: string;
    }[];
    disabled?: boolean;
    placeholder?: string;
    showValue?: boolean;
    [key: string]: any;
}
export interface FormItemApi {
    label: string;
    prop: string;
    value?: any;
    width?: number;
    labelWidth?: number;
    component?: ComponentApi;
    required?: boolean;
    rule?: Arrayable<FormItemRule>;
    group?: string;
}
interface GroupApi {
    type: 'tabs' | 'collapse';
    labels: string[];
    value?: string;
}
export interface FormApi {
    items: FormItemApi[];
    data: any;
    labelWidth?: number;
    labelPosition?: 'right' | 'left' | 'top';
    group?: GroupApi;
}
interface Props {
    form: FormApi;
    group?: string;
    validate?: (v: Promise<any>) => void;
    inline?: boolean;
}
declare function validate(callback: (vaild: boolean, fields: any) => void): void;
declare const _default: __VLS_WithTemplateSlots<import("vue").DefineComponent<__VLS_TypePropsToRuntimeProps<Props>, {
    validate: typeof validate;
    resetFields: () => void | undefined;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<__VLS_TypePropsToRuntimeProps<Props>>>, {}, {}>, Partial<Record<`form-${string}`, (_: {
    item: FormItemApi;
    data: any;
}) => any>> & {
    default?(_: {}): any;
}>;
export default _default;
type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;
type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: import('vue').PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: import('vue').PropType<T[K]>;
        required: true;
    };
};
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
